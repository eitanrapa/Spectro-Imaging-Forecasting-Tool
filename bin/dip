#!/usr/bin/env python3
# -*- Python -*-
# -*- coding: utf-8 -*-
#
# the sift development team
# (c) 2023-2025 all rights reserved


# get the package
import sift
import json
import git
import os
import numpy as np

class DIP(sift.application):
    """
    Differential Intensity Projection
    """

    run_file = sift.properties.str()
    run_file.doc = "run file name"

    band_file = sift.properties.str()
    run_file.doc = "band file name"

    @sift.export
    def main(self, *args, **kwargs):
        """
        Main entry point
        """

        repo = git.Repo('.', search_parent_directories=True)

        # Get run parameters
        with open(repo.working_tree_dir + '/input/' + self.run_file, 'r') as file:
            params = json.load(file)
        y = params.get('y')
        electron_temperature = params.get('electron_temperature')
        peculiar_vel = params.get('peculiar_velocity')
        temperature_precision = params.get('temperature_precision')
        time = params.get('time')
        realizations = params.get('realizations')
        angular_resolution = params.get('angular_resolution')

        # Get band parameters
        with open(repo.working_tree_dir + '/input/' + self.band_file, 'r') as file:
            loaded_band = json.load(file)

        # Get averages
        repo = git.Repo('.', search_parent_directories=True)

        if os.path.exists(repo.working_tree_dir + '/files/parameter_file_' + str(realizations) + '.npy'):
            # Read saved parameters file
            params = np.load(file=repo.working_tree_dir + '/files/parameter_file_' + str(realizations) + '.npy',
                             allow_pickle=True)

        else:
            parameters = sift.parameters()
            parameters.create_parameter_file(angular_resolution=angular_resolution, realizations=realizations)
            params = np.load(file=repo.working_tree_dir + '/files/parameter_file_' + str(realizations) + '.npy',
                             allow_pickle=True)

        amp_cmb = np.std(params[:, 2])
        amp_ksz = np.std(params[:, 3])
        amp_tsz = np.std(params[:, 4])

        band = sift.band(loaded_band)
        siftsim = sift.simulation(y_value=y, electron_temperature=electron_temperature, peculiar_velocity=peculiar_vel,
                                  temperature_precision=temperature_precision, bands=band, time=time)

        siftsim.differential_intensity_projection(amp_cmb=amp_cmb, amp_ksz=amp_ksz, amp_tsz=amp_tsz)

        # all done
        return 0


# bootstrap
if __name__ == "__main__":
    # instantiate the application
    app = DIP(name="dip")
    # invoke it
    status = app.run()
    # share its status with the shell
    raise SystemExit(status)

# end of file
